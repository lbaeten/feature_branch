---
title: "Git feature branch workflow"
format: html
embed-resources: true
---

Short tutorial on how to use version control in RStudio via Git (local) and Github (remote). The focus is on creating branches, committing to them, pushing to the remote on Github, and merging via pull request.

## Set up a project

### Prepare for a project with version control

On [Github.com](https://github.com/)

-   Create new repository on Github.com (`feature_branch`)
-   Copy the URL of the repo

![](github_screenshot.PNG){width="376"}

In RStudio: set up new project

-   File \> New project \> Version Control \> Git
-   Paste the URL of the repo
-   Choose directory for the project
-   Create a file, e.g. first.R.

### First commit in main

Working via the Terminal (tab next to Console) provides the most control over workflow

`$git status -s` checks the status of the new (unstaged) files

`$git add .` stages all the new, modified, unstaged files... (check via `status` again)

`$git commit -m "initial commit"` a direct commit with a custom message

### Check the history of commits

`$git log --all --graph` graph of commit history

`q` to exit the log graph

### Push to remote

`$git push origin` pushes all commits to the remote, i.e. to GitHub

## Workflow to develop new feature

### Create a branch

`$git branch new_feature` create the new branch with a custom name

`$git checkout new_feature` go to that branch

::: callout-note
# create and checkout new branch can be done in one step

`$git checkout -b new_feature`
:::

`git branch -a` show all branches and the one that is checked out (shown with \*)

### Sync branch to remote

The new branch now only lives in local Git. Create also a copy on the remote, so on GitHub.

`$git push origin -u new_feature` you only need to do this once

### commit to branch

Create a new file to start developing a feature (e.g. second.R). Stage and commit just like in the main.

-   Stage file(s)
-   Commit file(s)
-   Push to origin (when you are on the branch, only `$git push origin` is required)

::: callout-note
# branch is ahead of the main

This can be shown via the `$git log --all --graph` command. You'll see that the new_feature branch is one commit ahead of the main, both on local Git and on the remote GitHub.

![](git_log.PNG){width="411"}
:::

## Create pull request

### GitHub workflow

To to the repo on [GitHub.com](https://github.com/). Here you can click the 'compare & pull request' button. Then you can add a description, convert to draft, assign reviewers... and click 'Create pull request'. Finally, when everything is ready to be merged, click 'Merge pull request'. The new_feature branch is merged into the main branch.

::: {.callout-note}
# The merge is done in the remote

Now the merged files need to be pulled to the local project again, i.e. the merged version only lives in the remote at this moment.

:::

### Sync changes to local

`$git checkout main` switch to main branch again in the local project

`$git pull origin main`



